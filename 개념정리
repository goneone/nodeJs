-------------페이징처리----------------------------------------------------
1.동적 페이지네이션 - 페이지 별로 데이터를 나누어 받는 방식 - ex) 네이버 카페 같은건가?
2.정적 페이지네이션 - 전체 데이터를 한 번에 받는 방식.

이번 엑셀 대용량 다운로드는 전체 데이터(최대1만건)를 다 받아와서 그거를 엑셀에 넣는 작업.
엑셀 다운로드 버튼을 눌렀을때 조회버튼의 로직을 타서 전체 데이터를 조회하도록 함.
top API중 엑셀다운로드 공통 API인 Common_ExcelExport(arg0, arg1, arg2)는
arg0 : 테이블 아이디
arg1 : 팝업 여부(팝업에 위치한 테이블만 true, 아니면 false)
arg2 : 조회한 데이터 array
ex) common_ExcelExport('HLACRTM010M_TableView', false, ret.dto.SUB)
ex2)Top에서 JLSMSDM001M (기타기기관리) 1227line

------------------------------------------------------------------------------


로드밸런싱과 세션 클러스터링
로드밸런싱
하나의 인터넷 서비스가 발생하는 트래픽이 많을 때 여러대의 서버가 분산처리하여
서버의 로드율 증가, 부하량, 속도저하등을 고려하여 적절히 분산처리를 해결해 주는 서비스

로드밸런싱 서비스 방식
네트워크 상단의 L4 스위치가 존재하며 서버로 들어오는 패킷을 실서버로 균일하게 트래픽
부하를 분산시킨다.
(ex 실서버 중 정상적으로 작동하지 않는 경우 이를 감지하여 정상적으로 작동하는 서버로 부하를 분산시킨다.
)

cluster - 무리, 송이, 떼, 집단

클러스터링?
여러대의 서버가 동시에 한가지 업무를 수행하도록 만드는 것.
예를 들어 DB가 한대 있는데 이 한대가 뻗으면 시스템 장애가 난다.
만약 2대를 클러스터링 해 놓고 각각의 역할을 수행하다가 한놈이 뻗으면 나머지 한놈이
그 역할을 대신 수행하도록 하면 위와 같은 문제를 해결하면서 지속적인 서비스를 제공해줄 수 있게 됨.

세션 클러스터링?
was가 2대 이상 설치되어 있을 경우 동일한 세션으로 세션관리 하는 것을 의미한다.
예를 들어 L4 스위치를 통해 2대 이상의 was가 연결되어 있을 경우, 일반적으로는 사용자는 접속했던
was로 L4 스위치가 접속을 유도해주지만 하나의 WAS에서 허용된 동접수를 초과한 접속이
발생할 경우 다른쪽으로의 접속을 유도해주게 된다. 그럴 경우, 기존 WAS의 세션이 아닌
새로이 접속된 WAS로 세션이 이루어지고 그럴 경우 세션에 대한 처리 불일치가 발생한다.
그래서 각 WAS에 대한 세션을 하나의 세션으로 관리하게 함으로써 설사 사용자가 기존에 접속했던 WAS가 아닌
새로운 WAS로 접속하더라도 세션은 하나로 관리되기 때문에 세션에 대한 불일치가 발생하지 않게한다.
보통 세션 클러스터링은 WAS 설정으로 세팅할 수 있다.

로드밸런싱과 세션 클러스터링 차이점
로드 밸런싱은 클러스터링된 was의 한쪽에 부담이 가지 않게 하기 위해서
분산 시켜주는 역할을 말한다. 보통 스위치 단에서 이루어짐.
세션 클러스터링은 한쪽 부담이 가지않게 분산을 한다기 보단 하나의 서버의 장애를 방지하기 위해
임시방편 역할을 한다.

---------------------------------------------------------------------------
call by value 와 call by reference

---------------------------------------------------------------------------
메모리 구조
운영체제가 프로그램을 실행하는데 메모리관리를 어떻게하나?
동적관리는 무엇이고 왜필요한가?
프로그램을 실행할 때 프로그램 실행을 위해 메모리 공간이 요구된다
(상수,변수, 문자열등을 선언할 때에 필요..)
이러한 메모리공간은 운영체제가 관리를 해줌.
어떻게?
데이터, 힙, 스택로 구분지어서 관리해줌.

데이터영역은 전역변수나 static 변수를 저장하기 위한 공간
스택은 지역변수와 매개변수를 저장하기 위한 공간 (그외에다른것도 저장되는데 변수입장에서 봤을때 말하는거임)

**컴파일 타임에 함수에서 요구하는 스택의 크기가 결정되어야 한다.
------------------------------------------------------------------------------
암호화기법
개인키 (DES) - 대칭 암호 기법
공개키 (Public Key) - 비대칭 암호 기법
aes 는 대칭키 암호기법임. (키를 서로 주고받아 가지고있으니까)
------------------------------------------------------------------------------
Marshal
다른 기종의 컴퓨터 간의 통신을 위해서 서로간의 형식을 맞춘 것을 의미한다.
마샬링은 보통 A언어로 작성된 프로그램의 출력 매개변수들을
B언어로 작성된 프로그램의 입력으로 전달해야하는 경우에 필요하다.
언마샬링은 마샬링을 통해서 보내진 데이터들을 원래 구조로 복원 시키는 것이다.

Marshal/Unmarshal
Xml – 자바,파이썬 등 어떤 언어든 공통적으로 사용 할 수 있는 언어가 xml이다.
그래서 자바에서 String name = “엄욱남” 이거를 다른데로 전송하거나 하기 위해서 xml로 바꿔주는 것을 마샬링이라 한다.
Ex)po에서 top에게 던져주기 위해 마샬링을한다. 마샬링 방식은 json형식으로. Top와 po가 서로 미리 약속을 해둠.
top에서 Json.parser(msg) 이런식으로 하는 것을 언마샬링이라고 한다.

------------------------------------------------------------------------------
DOF(data object factory)
데이터베이스에 접근하여 데이터를 조회하거나 조작하는데 사용하는 객체
DB를 처리할 때 JDBC를 이용할 경우 사용자가 직접 구현해야 했던 여러 가지 반복적인 작업들을 대신해줌으로써 개발자가 편리한 개발이 가능하도록 한다.
***쿼리문과 TARGET DO가 맵핑 되는 원리.
컬럼명이 TARGET DO 안에 정의되어야 쿼리문에 전달이 됨.
Ex).select cardtype, cardname from T_ISS_POLICY 이 셀렉트문에서 cardtype과 cardname이 target do 안에 정의 되어야 쿼리문에 전달이 됨.
------------------------------------------------------------------------------
WAS가 없으면 왜 웹어플리케이션을 실행 할 수 없을까?
was는 웹어플리케이션(웹 시스템, 웹서비스)을 실행할 수 있는 기초적인 환경을 제공해줌.
was를 웹에서의 운영체제(os)라고 생각 하자.
*web에서 사용되어지는 jsp나 servlet 등이 실행 되기 위해서는 was가 필요함

현재 커넥트 프로젝트 was 경로 -
C:\Users\Tmax\Downloads\apache-tomcat-8.5.34\bin
was 버전 - 8.5.34
포트번호 변경법 -
C:\Users\Tmax\Downloads\apache-tomcat-8.5.34\conf
경로에서 server.xml파일에서 8080부분을 원하는 포트번호로 변경.
자세한건 인터넷 검색

***servlet이란?
url요청을 처리하는 프로그램이라고 생각하면 된다.
자바 웹 어플리케이션의 구성요소 중 동적인 처리를 하는 프로그램의 역할
서블릿을 정의해보면
*서블릿은 WAS에서 동작하는 java 클래스이다
서블릿은 HttpServlet을 상속받아야한다.
서블릿과 jsp로부터 최상의 결과를 얻으려면, 웹 페이지를 개발할 때
이 두가지를 조화롭게 상요해야 한다.
ex) 웹 페이지를 구성하는 화면(HTML)은 jsp로 표현하고 복잡한 프로그래밍은 서블릿으로 구현


*이클립스는 runtime으로 설정된 was에 밑에 작성된 규칙의 url로 servlet을 실행한다
http://localhost:8080/{프로젝트이름}/{URL Mapping 값}

*웹브라우저가 get메서드 방식으로 요청을 보내면
servlet의 doGet메서드가 호출된다.
------------------------------------------------------------------------------
servlet의 작성방법.

버전에 따라 두가지로 나눠짐.
3.0에서 사용하는방법
web.xml파일 사용하지 않음.
자바 어노테이션을 사용
3.0 미만에서 사용하는 방법
servlet을 등록할 때 web.xml파일에 등록

3.0미만 버전에서 web.xml의 동작 방식.
<servlet>
    <description></description>
    <display-name>TenServlet</display-name>
    <servlet-name>TenServlet</servlet-name>
    <servlet-class>exam.TenServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>TenServlet</servlet-name>
    <url-pattern>/ten</url-pattern>
  </servlet-mapping>

  여기서 url이 /ten 이라고 요청이 들어오면
  여기서 못찾으면 404페이지를 보여줌.
  존재하면 servlet-name을 확인함. 이이름을 가지고있으니까
  <servlet>태그 안에서 똑같은 이름의 servlet 이름을 찾음.
  TenServlet을 찾아서 실제로 exam.TenServlet을 실행시킴
  3.0이상 버전에서는 어노테이션이 이런일들을 대신 해줌.
------------------------------------------------------------------------------
servlet의 생명 주기
WAS는 서블릿 요청을 받으면 해당 서블릿이 메모리에 있는지 확인한다.
IF(메모리에 없음) {
  해당 서블릿 클래스를 메모리에 올림
  init() 메소드를 실행.
}
  service() 메소드를 실행
was가 종료되거나, 웹 어플리케이션이 새롭게 갱신될 경우 destroy() 메소드가 실행된다.

public LifecycleServlet() {
        System.out.println("LifecycleServlet 생성!!");
    }

public void init(ServletConfig config) throws ServletException {
	System.out.println("init 호출!!");
}

()요청된 객체가 메모리에 없으면 메모리에 올림.
메모리에 올라간 후에는
메모리에 있으면 service라는 메소드만 호출함.

서블릿이 수정되면. 메모리에 올라가있는 서블릿 객체는 사용 될수 없을 것이다
그 때 destroy 메소드가 호출됨.
그리고 브라우저에서 호출해보면
다시 객체를 생성하고 init 호출하고 service 호출함.)
------------------------------------------------------------------------------
service() 메소드는 어떻게 동작하나?
service(request, response) 메소드
HttpServlet에 이미 servlet 메소드가 이미 구현이 되어 있는 상태
내가 만든 클래스가 service라는 메소드가 가지고 있지 않다면
부모 클래스의 service가 실행될것이다 (상속~)

HttpServlet 서블릿에서 service메소드가 없는데도 실행이 되는 이유
이클립스에서 firstweb - example - HelloServlet 서블릿을 보면
public class HelloServlet extends HttpServlet {
HttpServlet을 상속 받았고 따로 service 메소드를 오버라이딩 하지 않았기 때문에
HttpServlet의 service() 메서드가 실행이 되는 것이다.
------------------------------------------------------------------------------
HttpServletRequest 와 HttpServletResponse
클라이언트로부터 요청이 들어오면 WAS는 HttpServletRequest 와 HttpServletResponse 객체를 생성한다.
------------------------------------------------------------------------------
------------------------------------------------------------------------------
뮤텍스 세마포어

뮤텍스란 MUTual EXclusion. 말 그대로 "상호 배제"로 해석 된다.
가장 쉽게 생각하자면 중복 실행 금지 프로그램이라고 생각하면 될지도.
윈도우에 프로그램을 하나만 띄워야 하는 프로그램을 만들거나,
실행 되고 있는 프로그램을 다시 실행 했을 경우 "실행 중인 해당 프로그램을 보여주거나" "이미 실행 되었다는 메시지"를 뿌려
주는 식이라고 가정한다면 뮤텍스를 사용 하는것이 좋다.
윈도우 서비스용 프로그램이 대표적인 예라고 할 수 있다.(2번 이상 동시에 실행이 되진 않으니까..)

그러면 세마포어(semaphore: 수신호)는? 한 컴퓨터에 사용자가 노트장이라는 프로그램을 최대한 5개만 실행 되도록
개발 하고 싶다면 바로 세마포어를 써야 한다.
여기서 "최대한 5개만" 이라는 5의 수치는 임계세션(Critical Section)의 계수이고 이런 임계세션을
관리 하는 것을 계수 세마포어라고 하며 세마포어 중 하나인 것이다.

사용자가 notepad.exe를 실행 명령에 20번을 입력하고 동시에 실행 시키려 한다면,
5번만 실행 되고 15번은 무시 되게 하거나, 5번을 실행 하고 하나씩 종료 될 때를 기다렸다가
순차적으로 15개의 노트장을 실행 시켜 줄 수도 있다.
다시 정리 하자면 뮤텍스는 상호배제 알고리즘으로 synchronization로 만든
블록 사이의 로직이 실행이 다 끝날 때까지 락을 걸어 사용한다고 했을 때,
세마포어는 상호배제 알고리즘을 사용하나 거기에 임계영역에 대한 범위를 만들어서 자원을 보호한다고 생각하면 된다.
*참고로 이진 세마포어에서 임계섹션이 0과 1을 갖는 쓰레드나 프로세스는 뮤텍스라고 생각해도 무방하다.
젠킨스란? 빌드 & 배포 !
오픈소스 자동화 서버
다수의 개발자들이 하나의 프로그램을 개발할 때 버전 충돌을 방지하기 위해
각자 작업한 내용을 공유영역에 있는 저장소에 빈번히 업로드함으로써 지속적 통합이 가능하도록 해줌.
*젠킨스는 CI(Continuous Intergration)툴임
젠킨스 war - 단독으로 또는 톰캣 같은 자바 애플리케이션 서버에서 서블릿으로 실행 할 수 있다.

-----------------------------------------------------------------------------------------
컨테이너와 VM

container란?
컨테이너는 프로그램이 작동하기 위한 최소한의 요소들을 묶어 패키징한 OS다.
애플리케이션을 서로 다른 컴퓨팅 환경으로 이동하더라도 안정적으로 실행하기 위한 고민에서 나온 대안...
*시스템을 가상화 하는 것이 아닌 어플리케이션을 구동할 수 있는 환경을 가상화 한다
*개념적으로 애플리케이션과 애플리케이션 실행에 필요한 라이브러리, 바이너리, 구성파일 등을 하나로 묶는 것이다.
(컨테이너 개념으로 묶어두면 개발 환경, 테스트 환경, 실 운영 환경으로 옮겨 다녀도 오류가 날 가능성이 줄어드니까)
가볍고 성능이 좋고 더 많은 애플리케이션을 구동할 수 있어 빠른 빌드와 배포가 가능하다.
*개발에서 운영으로의 이관을 손쉽게 할 수 있는 기술로서, 개발자와 운영자들 사이의 의사소통, 협업, 융합을 강조하는
데브옵스 기반의 패러다임을 실현하게 할 수 있는 기반 기술이기도 하다.

가상머신과 컨테이너의 차이점은?
가상머신을 만들어서 배포를 해도 비슷한 효과가 있겠지만.
가상 머신과는 달리 컨테이너는 게스트 운영체제가 포함되어 있지 않아 작고 빠르게 구성할 수 있다.

-----------------------------------------------------------------------------------------
Docker란?
도커는 컨테이너 기술을 급부상시킨 사실상 컨테이너 기술의 주인공인 셈.
리눅스의 운영- 시스템- 레벨 가상화 기술을 기반으로
추상화 및 자동화 레이어를 통해 소프트웨어 컨테이너 내에 애플리케이션 배포를 자동화하는 오픈소스 프로젝트..

최근에는 대용량 컨테이너의 배포, 관리, 클러스터 및 로드 밸런싱을 위해, 오픈 소스기반의
컨테이너 관리 프로그램들의 중요도가 높아져가고 있음.

이러한 컨테이너 기술을 적용한 사례?
구글은 리눅스 컨테이너 기술을 가장 많이 활용, 서비스 하고 있음.
지메일, 구글드라이브 등도 컨테이너로 운영중

*0컨테이너와 VM은 비슷한 목적을 가지고 있다.
애플리케이션과 그 의존성들을 독립된 단위로 묶어서 어디서든 실행 가능하게 하는 것.
VM은 프로그램을 실제 컴퓨터처럼 실행한다.
VM들은 하이퍼 바이저를 통해 물리적 기계위에서 돌아간다.
한편 하이퍼 바이저는 호스트 머신이나 베어메탈위에서 실행된다.



-----------------------------------------------------------------------------------------
rest란?
http 기반으로 필요한 자원에 접근하는 방식을 정해놓은 네트워크 아키텍처
여기서 자원이란, 저장된 데이터(dbms), 이미지,동영상,문서와 같은 파일, 서비스(이메일 전송,푸쉬 메시지 등) 등을 모두 포함한다
좁은의미로 rest란 http를 통해 crud를 실행하는 api를 뜻한다.

restful?
rest의 제약조건이 있는데 이 제약조건을 준수하는 웹서비스를 RESTFul하다고 한다.
1.클라이언트/서버 - 클라이언트와 서버가 각각 역할이 구분되어야 한다.
2.무상태(Stateless) - REST 서버는 작업을 위한 상태정보(쿠기, 세션 등)를 관리 하지 않아야 한다.
3.캐쉬 - 캐쉬를 제공해야 한다.
4.계층화 - 서버를 다중 계층으로 구성 할 수 있어야 한다.
5.인터페이스 일관성 - 아키텍처를 단순화하고 분리해 각 부분을 독립적으로 발전 시킬수 있음

rest(Representational State Transfer) = 표현적인 상태 전송,전달
예를 들어 책을 표현할때,
책의 이름 : 드래곤볼
책의 페이지수 : 300페이지
이런식으로 표현 할 수 있고 json으로도, xml으로도 표현할 수 있다.
-----------------------------------------------------------------------
pojo 방식이란?
먼가 있어보이려고 만들어낸 말이다.
순수 자바? 멤버값(속성), getter/setter 메소드만 갖는 클래스를 말한다.
다른 프레임워크에 종속되지 않는 클래스를 말한다.(이 클래스를 사용하려면 꼭 그 미들웨어가 있어야한다. 이러면 POJO아님)
아무것도 종속되지 않았다고 POJO가 아니다. 객체지향 철학으로 구성되어 있어야 POJO다 (매우 중요)
그냥 순수자바로 만든 객체라고 POJO가 아니다.
-----------------------------------------------------------------------
Saas(Software as a Service)
소프트웨어를 '서비스' 개념으로 제공받고 이에 대한 비용을 지불하는 비즈니스 모델을 의미함.
SaaS 서비스를 구축하기 위한 기술적 요소는 컨피그레이션 기반의 애플리케이션 커스터마이징 ,멀티 테넌시 아키텍처,
확장성을 지원하는 인프라인데 적용단계에 따라 일반적으로 4개의 Level로 구분한다.
-----------------------------------------------------------------------
컨테이너 오케스트레이션
애플리케이션은 더 이상 하나의 통일체가 아니라 특정 애플리케이션이 설계 의도대로 기능하도록
함께 작동해야 하는 수십 또는 수백 개의 느슨하게 결합되고 컨테이너화된 요소로 구성된다.
컨테이너 오케스트레이션은 개별 구성요소와 애플리케이션 계층의 작업을 정리하는 과정을 의미한다.
*컨테이너 배포관리를 흔히 컨테이너 오케스트레이션이라고 부른다.
목적은 컨테이너의 배포 프로세스를 최적화 하는데 있으며, 컨테이너와 호스트 수가
증가함에 따라 점점 더 가치있게됨

컨테이너 오케스트레이션의 기능
  -컨테이너 자동 배치 및 복제
  -컨테이너 그룹에 대한 로드밸런싱
      *로드밸런싱
      로드밸런싱
      하나의 인터넷 서비스가 발생하는 트래픽이 많을 때 여러대의 서버가 분산처리하여
      서버의 로드율 증가, 부하량, 속도저하등을 고려하여 적절히 분산처리를 해결해 주는 서비스

      로드밸런싱 서비스 방식
      네트워크 상단의 L4 스위치가 존재하며 서버로 들어오는 패킷을 실서버로 균일하게 트래픽
      부하를 분산시킨다.
      (ex 실서버 중 정상적으로 작동하지 않는 경우 이를 감지하여 정상적으로 작동하는 서버로 부하를 분산시킨다.)

      *클러스터링
      클러스터링?
      여러대의 서버가 동시에 한가지 업무를 수행하도록 만드는 것.
      예를 들어 DB가 한대 있는데 이 한대가 뻗으면 시스템 장애가 난다.
      만약 2대를 클러스터링 해 놓고 각각의 역할을 수행하다가 한놈이 뻗으면 나머지 한놈이
      그 역할을 대신 수행하도록 하면 위와 같은 문제를 해결하면서 지속적인 서비스를 제공해줄 수 있게 됨.
  -컨테이너 장애 복구
  -클러스터 외부에 서비스 노출
  -컨테이너 추가 또는 제거로 확장 및 축소
  -컨테이너 서비스간의 인터페이스를 통한 연결 및 네트워크 포트 노출 제어
