------------------------------------------------------------------------------
DOF(data object factory)
데이터베이스에 접근하여 데이터를 조회하거나 조작하는데 사용하는 객체
DB를 처리할 때 JDBC를 이용할 경우 사용자가 직접 구현해야 했던 여러 가지 반복적인 작업들을 대신해줌으로써
편리한 개발이 가능하도록 한다.
***쿼리문과 TARGET DO가 맵핑 되는 원리.
컬럼명이 TARGET DO 안에 정의되어야 쿼리문에 전달이 됨.
Ex).select cardtype, cardname from T_ISS_POLICY 이 셀렉트문에서 cardtype과 cardname이 target do 안에 정의 되어야 쿼리문에 전달이 됨.

Select문>
select *empno, *ename, *deptno from emp where ename LIKE :ename || '%'

Insert문>
insert into emp
values (*:empno, *:ename, *:deptno)  d

Update문>
update emp set = *:ename where empno = :empno

Delete문>
delete from emp where empno = :empno

각쿼리의 *친 부분이 Target Do안에 정의되어야 쿼리문에 전달이됨
대소문자 구분하니 정확한 명칭으로 기입필요
Where 이하 작성되는 입력값은 Dof 객체내에 자동으로 set/get 메소드가 만들어짐
ttt
------------------------------------------------------------------------------
po에서 db쿼리에 값 넣을 때 주의 할 점
예시1
UPDATE T_ADM_Controller_O SET IP = :IP where Equipseq = :EquipSeq ;
이라는 쿼리가 있다면
set ip 부분과 where equipseq 부분 값넣는 방법이 다름.
tempOutSub2.setIP(bo_arg0_getSub(i).getIP());
set 부분에 넣는건 tempOutSub2(TargetDo)에 값 넣어 줘야하고
where 조건절에 해당하는 입력 값은 df객체의 set함수()에 셋팅
DLSCSDM003T01DAO.setEquipSeq(doCall14.getEquipSeq());
DLSCSDM003T01DAO.update(tempOutSub2, true);

예시2
update EMP set temp_val :temp_val where empno =:empno
set키워드 뒤에오는 값은 TargetDo에 세팅.
doCall1.setTemp_val(arg0.getTemp_val());
where 조건절에 해당하는 입력 값은 df객체의 set함수에 세팅
emptestdof.setEmpno(arg0.getEmpno());
------------------------------------------------------------------------------


PO에서 디버깅
폴더구조
bcm
clt
fwd

단위테스트 할때 ->

개발 가이드 표준관련
메시지처리나, 예외처리는 차차 나갈 예정.
가이드문서에는 내용이 들어가있으나 고객과 협의가 안된 사항이기에 메시지, 다국어처리는 빼고 코딩.
예외처리는 일단은 ..ㄱ ?

*메타 등록할때 group명 meta는 쓰지말것

git - 한명만 커밋해도
pull > 작업 > pull(!) > commit and push

Dirty WorkTree : 기존 문제가 되는 파일을 지우고 다시 pull을 받는다.

최초 작업하고 껍데기는 commit
이 후 소스가 변경될때 마다는 Hot Delpoy
정말 완성이 되었을 떄에 commit

[master -> master] 커밋 성공 메시지
[rejected] : 커밋 실패 (pull한 후에 다시 소스를 수정하고 commit)

커밋 이후 > jenkins에 가서 build가 성공 했는지 안했는지 확인.
