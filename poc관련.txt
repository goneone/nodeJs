POC
현 상황
차세대 ISP 진행 중(IBK시스템과 티맥스소프트 컨소시엄으로 주사업자로 진행중)
제품 : 프로오브젝트 , 애니링크 예정.
기간 : 월요일부터 2월 15일. (2월 14일까지 모두 완료)
현 상황 : 현재 시나리오 선정 진행중
*참고 - 우리 팀은 프로사스기반의 플랫폼을 지원하는 팀이 될꺼임.(Top, Po, Anylink)
--------------------------------------------------------------------------
POC의 핵심은 배치, 센터컷에 대한 아키텍쳐, 메커니즘 수행동작 까지보여주는 거.
개발 편의성
운영 편의성
모니터링 등을 강점으로 보여줘야 함.
-성능테스트 시나리오는 제외 됨.
하이퍼데이타, ai 등 시나리오에 추가 할 수도
--------------------------------------------------------------------------
하이퍼데이터(티맥스 데이터 제품)
이미지로그나 거래로그, 오류로그 등을
하이퍼데이터에서 만든 데이터(오류 유형별 통계데이터, 유저별 통계데이터 등의 데이터)를 가지고
UI에다가 ALERT 창 띄어주거나 카카오톡을 통해서 운영 담당자들에게 실시간 NOTI등을 하면서
운영에 대한 효율성,편리성을 보여줄 예정
이러한 것을 하기위해서 우리는 top를 가지고 ui를 구성하고, 서버단을 만들어야함
우리가 이번 poc를 통해서 po7의 기능을 만든다고 보면됨
--------------------------------------------------------------------------
배치
기본데이터를 조회해서 건바이건으로 처리해주는게 기본적인 에전의 배치 루틴이다.
한건 한건 가지고와서 db에 로딩해주고 처리해주는게 일반적인 배치
요즈음의 추세는 ETL(Extract, Transform, Load) 3단계 구조의 배치.
데이터를 가지고와서 가공하고 최종데이터를 로딩해준다. <--(우리 제품의 컨셉이 이거)
--------------------------------------------------------------------------
센터컷
db든 파일이든 어떤 데이터가 있다고 가정하자
티맥스에서 월급을 받아야하는데 1000명에 대한 계좌정보를 은행에다가 줄것이다(sam 파일 형식으로 )
누구는 얼마, 누구는 얼마 a계좌에서 누구계좌로 얼마 입금 해주세요라는 명단을 던짐.
그러면 우리은행에는 이런 데이터를 받아들이는 시스템이 있을 것이다.
딱 우리은행에 전송하면 이 파일을 읽어서 실제 센터컷 엔진에서 읽어들일수 있게끔
우리은행의 형식에 맞게끔 데이터를 기록해준다.
이게 센터컷 원장
내가 화면에서 입력하는 파라미터를 db에다가 등록해주는 거임.
은행원이 1000명 다 입력 할 수 없으니 시스템적으로 해달라고 의뢰하는거라보면됨.

쉽게 말하면 이미 구성된 온라인 서비스를
배치화시켜서 돌리는게 온라인 일괄 배치임.
--------------------------------------------------------------------------
모니터링
(
실제 거래 유형별
사용자별
오류 유형별
채널별
)
이런식의 통계나 모니터링 하는 기능을 만들 예정
-TOP, PO 구현 예정
선행으로 인터페이스 상에서 거래/이미지/오류 로그 기록을 해야함
오류 유형 – ORA코드가 떨어 질 수도 있고,
실제 업무를 하다보면 COMEXXX 이런 코드들이 떨어지는데
이런 코드들에 대해 크리티컬 메시지를 처리할 수있는 방식을 만들어야함.
ex(어떤 코드가  임계치 이상 몇 회 이상, 1시간 이내 발생하면 카카오나 top push를 통해서 alert을 띄우거나 하는 것을 구현 )
--------------------------------------------------------------------------
온라인 아키텍처 (한국과학기술연구원_ PO 아키텍쳐 pptx 20page 참조)?
EM - 이벤트매니저
EM은 ui에서 호출되거나 채널에서 호출 될 때 가장 먼저 호출되는 인터페이스.
싱글 스레드로 노드자바형식으로 구현 되어있음
반응성을 높이기 위해서 원쓰레드임. 이 안에는 멀티플렉서라는 엔진이 있는데
단일 큐로 쓰레드에 들어오게되면 멀티플렉서가 이벤트 핸들러 역할을 해서 서비스매니저를 호출할때
멀티플하게 호출해줌.
*EM은 nodejs를 nodejava라고 티맥스에서 가공해서 만들었음. 노드자바 형식으로 구현되어 있음.
이벤트 매니저는 이벤트를 받아서 토스해주는 역할을 하는거임. 현재는 http 지원

SM - 서비스매니저
업무 서비스를 호출해 주는 so를 호출해주는 역할을 한다.
*service = 거래단위

CM - 컴포넌트매니저 (다른 사람꺼 참조..)
서비스간의 호출 구조를 하나의 컴포넌트들을 가지고 있는 컴포넌트 팩토리 역할을 해서 호출하는 역할을 해줌(?)
--------------------------------------------------------------------------
선처리 후처리가 뭔가?

 시스템선처리
서비스그룹 선처리
 업무선처리
 업무후처리
서비그그룹 후처리
 시스템후처리

서비스가 유입되면 즉, sm에서 호출하게 되면 위의 루틴으로 흘러감.
시스템선처리는 시스템적으로 뭔가 밸리데이션 할 때
(ex 접속, 통제, 로그 , 통계데이터 기록하거나 이미지로그 같은거.
전문이 처음에 들어왔을때 있는 모습 그대로 기록해주는거

업무선처리는 업무가 호출될때 업무에 특화된 선처리 해야 할 것들.
	예를 들어서 여신(대출) 업무라고 해보자.
	선처리에서 고객의 신용등급을 먼저 확인해서 신용등급이 7등급이면 업무 안태움.(대출 안해줄꺼니까)
	근데 만약에 3등급이다 그럼 대출 할꺼니까 업무서비스 호출.
이런식으로 업무적으로 사전 밸리데이션 체크, 업무에 특성화된 로그를 기록할때 쓰는게 업무선처리임.

업무후처리는 업무가 동작 하고 나서 업무 담당자가 별도로 자기만의 로그가 기록이 되어야한다거나
별도의 후속처리를 해줘야 할 때 업무후처리를 씀.

--------------------------------------------------------------------------
이 시스템 선처리, 후처리 관련해서 우리가 할 일.

만약에 우리쪽 JVM을 띄어놨다고 가정하자.
우리쪽 jvm에 was(제우스) 기반의 컨테이너가 하나 떠있다고 치자.

시스템 선처리에서 시스템 자체를 접근할수 있느냐 없느냐를 밸리데이션한다.
시스템 접근자체를 통제하도록.
ex)18시 이후는 거래가 일어 나면안된다. 하면 거래 제어를 할 것이다.
이런식으로 접근 통제를 하거나, 업무로그도 기록할 수 있음.
이런식의 서버 접근을 아예 통제하는게 시스템 선처리임.

그런데 만약에 시스템 접근은 할수있는데 특정 업무 서비스그룹은 호출 못하도록 막는다치면
한단계 더 들어올것이다
ex)만약 17시라면 시스템 선처리에서는 거래 통과할꺼다.
그런데. a서비스그룹과 b서비스그룹이 중 b서비스 그룹이 장애가 났다고 가정하자
그러면  b서비스그룹에 대해 현재 장애 조치중입니다라고 거래를 블록킹 할수있을것이다.
이때 a서비스는 호출시켜주고 b서비스그룹은 막고 할 수 있음.

그런데 이러한 설정들이 시스템선처리 한군데 다 있으면 코드가 복잡해 질 것이다
위의 설정들이나 서비스 그룹별 에외케이스 등의 설정들은 코드로 넣는게 아니라
파라미터로 다 적재시켜놓고 체크하는 루틴만 들어가고. 체크하는 루틴데이터가 성립이 되면 반환해주고 통과시켜주고 함.
실제코드는 10라인 미만이고. 그 10라인 미만이 모든 케이스에 대해서 다 수용을 해야 한다.
내가 유입하는 서비스그룹의 서비스 그룹코드가 뭐냐, 서비스 so명이 뭐냐에 따라서 밸리데이션을 할 수 있을 것이다.
보통 '몇시 이후에는 거래를 못합니다' ,'지금은 거래 불가능한 시간입니다' 이럴 때 많이씀

몇 명 포진시켜서 실제 업무영역별로 아키텍쳐 구분해서 코딩하고, 디비 설계하고, 데이터 벨리데이션까지 다 만들꺼임
서버영역과 ap영역 구분해서 거래제어에 대한 거래제어 아키텍쳐 추가 할 예정

--------------------------------------------------------------------------
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
인터페이스 모듈을 비오단위로 만들꺼임.
그 비오를 우리쪽에서 컴포넌트처럼 보여주기식으로 할껀데. 될런지는 모르겠음.
원래 피오에보면 비오를 연동할때 - 연동모듈.

연동모듈이뭐지? 에스오 연동하는거.

emb에서

http 인아웃 맵핑.?

tcp는 뭐냐.?
http통신은 뭐고.
그러면홈페이지는뭔 통신하는거야 so는?



미들웨어에 대한 정보가
여신 수신
여신 수신.
있따 치면

웹투비에서 로드밸런싱을 할꺼아냐 ?
여신에서 나온걸 수신에서 콜해야돼
이게 연동
어차피 다 리모트 콜 이니깐.


지금 얘끼하는건
금감원을 호출해야하는데.
mci fep 뭐이런 솔루션이 있을텐데.
여신에서 수신도 호출하지만 얘가 금감원에다가
전달해야하는데 이떄 통신모듈로 콜하는거임.


app
오픈 api??

acall은? rcall (랑데뷰콜?)



연구원들은 계속


em 이 있고 sm 이있고 뭐 있다치면
api 게이트웨이가 연동을 할껀데.

api 는 어떤 프로토콜에 대한 걸 제공해주고
인증과 인가.



어디로갈껀가에 대한 라우팅도 api 게이트웨이가 한다.

인증 인가에 대한 우리쪽 서버가 있을텐데
실제 쿠키나, 토큰값
즉 얘는 누구고 접속이 가능한가? 에 대한 거를 인증하게 되어있거든
이걸 토큰발행을해서 ui서부터 계속 관리ㅡㄹ 하게되어있음

인가는 어느 서비스쪽으로 갈수 있느냐 에 따른 권한부여를 해줌.
그래야 a서비스 b서비스 c서비스중 너는 a서비스만 가능.

이런 구조로 되어있었는데
방향을 바꿈.

em에서 플로우를 컨트롤하겠다.
서비스 오케스트레이션
이런 서비스에 대한 흐름제어를 해주는게 오케스트레이션의 컨셉.
애니링크가 되긴 됨.

근데 api게이트웨이에서 하지 않겠다.

em에서 뭔가 하겠다. < -- 근데 될지는 잘모르겠음.


오케스트레이션을 한다? 쓰레드를 점유한다는거고 sm에서만 가능할꺼다.
--------------------------------------------------------------------------
타임아웃
서비스가 시작되서 종료될떄까지 1초 이내다. 만약 1초를 넘어가면 그게 타임아웃.
우리의 타임아웃 정책 - so가 시작되면 bo가 호출되고.. n개만큼 호출될텐데
지금까지의 타임아웃 정책은
서비스 매니저(sm)에서 so를 시작하는 스타트를 딱 날리는 순간부터 타임아웃 정책이 시작되서
db에 엑세스하는. (db에 엑세스하는 모듈을 엔티티 모듈이라고함 ) 엔티티가 시작되는 시점을 딱 체크함.
또 다음 디비를 호출하는 시점을  또 체크.
그래서 만약 5초가 안넘어가면 통과
또 디비 호출 시점 체크
5초 안넘어 가면 통과.
근데 만약 bo -> bo -> bo 이러고 db를 호출안한다면 ?
db가 없으니 체크를 안하고. 타임아웃이 안되고 11초가 돼도 거래가 나감..
이건 정상적인 타임아웃이 아님.
그래서 매 호출되는 모듈의 영역별로 다 체크함.
타임아웃을 조금 세밀하게 잡겠다.
그게 우리 제품의 정책 컨셉.

was(제우스)에서도 거래타임아웃 정책을 가져 갈 수있는데
거래는 1초부터 10초 분산이 되어있을꺼다
미들웨어는 이 중에서 가장 큰놈을 잡아서 +a 를 잡아줌(거래는 어떻게 될지 모르는거니까)
거래는 1초짜리가 있고 5초짜리 10초짜리 50초짜리가 있을 수 수있는데
미들웨어는보통 60초~300초에대한 시간을 세팅하고있음 (모든거래는 웬만하면 수용하겠다라는 의미)

타임아웃을 가져가는 이유?
오류 모니터링이나.
메모리 누수.
***지연 발생시키지 않으려고
거래가 타임아웃을 받지 않으면 거래가 유입되서 튀어나가지를 않고 끝까지 있음.
그러면 거래가 쌓이고.. 거래가 계쏙 쌓여서 나가질 않으니 지연 되던놈이 더 지연이 됨. (메모리,cpu를 경쟁하니까.)
그렇기 떄문에 이 시간이 초과하면 바로 아웃을 시켜서 시스템이 원활하게 돌아가게 하기 위해서 타임아웃 정책이 있는 거임.
데이터 정합성 유지하고 시스템 원활하게 하기위해서 타임아웃 정책을 가져가는 거임.
--------------------------------------------------------------------------
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
후행 서비스
만약에 서비스를 동작시킨다고 하자.

이체거래라고 해보자
SO1 -> BO => 출금 => 총계정원장
       |
       V
       SO2 -> BO2 => 입금

우리은행 미금지점, 선릉지점이라고 해보자.
지점단위로 자산관리하는 원장이 있을 꺼고,
전체 우리은행에 대한 원장이 따로 있을 꺼다.

1지점에서 인출을 했다 치면 1지점에 100만원 있는데 10만원 인출 했다 치자 그럼 90 있을 꺼고
2지점에서는 200만원 있는데 입금으로 10만원 추가됐다 치면 210만원이 있을꺼다.

이 거래에서는 원장 처리하는 부분이 없고
후행처리로 원장, 총계정원장에 대한 처리를 해야함.
출금하면서 후헹처리, 다른 온라인서비스를 콜하게끔 하는 메커니즘이있는데
거기다가 데이터를 마킹하고
입금을 했을때

특정 브랜치에대한 원장만 +, -
온라인 서비스는 딱 호출만 해놓고 종료 시킴..


후행 메커니즘은
자기 내 서비스 구간이 있고
후행 구간이 있어
서비스구간이 3초 후행구간이 2초걸린다치자
고객을 하루종일 3초로 대응하는 것과
5초로 대응하는것은 회전율이 다를꺼다
그러면 실제 온라인서비스에서 3초만에 다 완료됐습니다 하고
전표를 주는거랑 5초기다리고 전표주는건 다를꺼다

실제 내가 필요한 서비스의 데이터만 핸들링하고, 서비스 구간만 종료시키고
남저지는 뺵그라운드로 돌리겠다라는 소리.

후속처리.
하나의 서비스에대한 후속처리를 할수있는 메커니즘을 후행 서비스라고한다.
트랜잭션이 분리되서..
(그럼 후속처리와 배치의 차이점은 뭐지....??)
--------------------------------------------------------------------------
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
후행제어에 대한 시연
후행서비스가 돌고있는데 후행서비스를 정지시키거나 재시작할수도 있고
온라인서비스 엔진(런타임)이 있고 이 안에 deffered manager라고 있음
deffered manager는 본서비스가 돌지만 defeered 서비스 돌아가는 rte가 따로 있을수도있고
여기에서 돌수도있음
얘가 누구한테 동작을 날리느냐..다
후행전용으로 컨테이너를 분리할수도있음.

데이터를 읽어와서 어디로 날릴까? 라는 판단은
나 어느컨테이너에서 동작할 꺼야~하고 로그단위로 갖고있음.


얘가 동작할떄 게쏙 주기적으로 3초 풀링하는 기능이 수있는데
?

제어라는것은 온라인 배치 센터컷 다 마찬가지지만
제어는 시작과 종료가 있음. 기본적으로 .
그리고 일시중지 재시작에 대한 기능이 있고
이런거에 대한 온오프가 있음.

그리고 센터컷도 마찬가지
던지는 시간에 대한 제어도  있지만 어느 노드에 얼마를 더줄까 라고하는 포션을 관리하는
ratio 가 있고..
요런식으로 제어에대한 항목들은 여러가지임.

센터컷은 센터컷대로 배치는 배치대로 . (유량제어, 어쩌구제어~등등 시간제어하는 것들)

멀티노드인데 포션을 얼마나 줄건가. 이런가 얘가 장애날거같으면 저쪽을 ㅗ돌리고 이런식으로..

이중에서 우리는 센터컷으로 보여줄꺼임.
되도록이면.
배치도 보여달라할껀데 .
--------------------------------------------------------------------------

입금처리가 아니라 이자 납입으로 바뀔꺼임.
주택금융공사가  보증회사이기떄문에 이자를 받을꺼거든
이자를 회수한다고
그니까 이자납입에 대한 프로세스로 바뀔꺼다


서비스가 들어오면 들어온 전문 그대로의 모습을 그대로 이쁘게 담아야하는게 이미지로그임.
데이터베이스에서는 여러가지 컬럼을 갖고있는데.
이미지로그는 단순히 guid |전문|I/O 이런 형식으로 되어 있음
po에서 ui로 나갈떄

전문을 읽어가지고 재처리를 할 수 있음.
이게 이미지로그임.

그리고 거래로그라고 있는데 거래로그는 뭐냐면
거래로그 (트랜잭션이 존재하는 전문)
조회로그 (트랜잭션이 존재 하지 않는 전문)
오류로그 (에러발생 전문)

트랜잭션이뭔데.?
--------------------------------------------------------------------------
맥스레코드는
데이터에대한 조회를 한정하겠다라는거다.
타임아웃과 똑같은거라보면됨.
(에스원에서 10000건 그거~)
디비에서 조회를 했는데 데이터를 만건 십만건 조회하면 될까 안될까
UI에서 그리드가 있는데(top테이블) 화면에서 요청하고 조회버튼 땅 때리면
서버에서 조회해서 특정 사업장에 대한 출입자 목록을 뽑는다 가정해보자.
엄청나게 많은 데이터가 있을것이다.
100만건 조회한다치면..서버는 죽을것이다. 부하가 걸려서.
왜냐면 jvm, 즉 자바나 C , 코볼등은 프로세스 기반이다
하나의 서비스가 하나의 프로세스로 jvm 에뜬다.
jvm은 메모리가 한정적이다
메모리는 jvm이 하나 뜰 때 2~8기가 정도로 뜨는데
데이터 100만건이면 (1억바이트라고 쳐보자)
메모리구조는 바둑판처럼 나열이 되어 있는데
8기가만큼에 바이트형식으로 박히게 되어있음.
그러면 1억바이트가 연속이어야됨.
그렇기 떄문에 메모리는 조회 치고 딱 들어가는 시점에
1억바이트가 연결 되어 있는 메모리에 박음.
근데 만약에 1바이트다 그러면 어디에다 박힐지 모르고 아무대나 박음.
이게 jvm의 특성이다.

그래서 만약 현재 5기가 쓰고 있는데 내가 요청한게 1기가다.
그러면 ome(out of memory exception) 발생 하면 안되는데 발생함.
왜 연속된 공간이 없기 때문에 그러므로 인해서 풀gc가 발생하고 결국에는 메모리가 발생하게 됨.
그렇기 떄문에 대용량의 데이터는 jvm에서 아주 취약하다.
하튼 그래서 맥스 레코드 카운트를 주는 이유는 1000건이상 온라인에서는 조회하지마라.라고 설정을 하는거임.
데이터가 1001이다 그러면 에러 발생. 이게 맥스레코드 카운트를 주는 설정이다
만약 천만건이다라고 하면

이러한 대용량 데이터를 처리하는 방안은 여러가지 있음.
(에스원에서 버츄얼스크롤 등으로 대용량 만건까지 조회하게끔 하는 것 등등)
--------------------------------------------------------------------------






system.getproperty.


key value
AA  aa
BB  bb

jvm이 뜰때 디비읽어서 그값을 캐시안에 가지고있음.
-----------------------------------------





코드인스펙션
우리쪽에서 특정명령어나 특정키워드 문법등을 벨리데이션 할 수 있도록하는 기능
logger (배치) -> 피오 제우스 다 찎힘.
sysout -> 로그안찍힘 , 레벨관리도안되고 ,온오프도 안되고,
------> 개발툴가지고 설정시연 예정.



call-depth
콜되는깊이를 얘기함.
예를들어 비오를만들었을때
다른곳에서 만든 비오를 콜했을때..
더블클릭하면 비오.. 또클릭함녀 비오 보이고

이런게 콜뎁스.
bo->bo->bo

->제품 기능가지고 설명예쩡 커스터마이징 아님.


디펜던시 영향도 분석
