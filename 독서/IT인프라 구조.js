IT인프라 구조

인프라 구조
수평 분할 - 같은 처리를 나누어함.
수직 분할 - 다른 처리를 담당.
지리 분할 - 재해 대응 구성, 클라우드

1.2 집약형과 분할형 아키텍처
  1.2.1 집약형 아키텍처
  대형 컴퓨터를 이용해서 모든 업무를 처리함. (하나의 컴퓨터로 모든 처리를 함)
  ex) 뭐 예를 들어 계좌 이체할래, 은행 잔액 알려줘 등등 모든걸 하나의 컴퓨터가 처리함.
  장점 : 구성이 간단해요
         대형 컴퓨터의 리소스 관리나 이중화에 의해 안정성이 높고 고성능이다.
  단점 : 대형 컴퓨터의 도입 비용과 유지 비용이 크다.
         확장성에 한계가 있다.
  중점 : 장비 고장 등으로 업무가 멈추지 않도록 해야함.

  * 현재는 가격이 싸고 확장성이 높은 분할형 아키텍처가 주로 사용 되고 있다.

  1.2.2  분할형 아키텍처
  대형 컴퓨터가 했던 처리를 다수의 소형 컴퓨터로 분할 처리
  여러 컴퓨터가 연결되어 있어 데이터를 서로 교환함.
  장점 : 낮은 비용으로 시스템을 구축할 수 있다.
         더 많은 컴퓨터를 이용해서 시스템 전체 성능을 향상 시킬 수 있어 확장성이 좋다.
  단점 : 서버 수가 늘어나면 이를 운영하기 위한 구조가 복잡해진다
         서버가 망가지면 영향 범위를 최소화 하기 위해 서버별 역할을 세세하게 검토해야 한다.

*분할형 아키텍처에서 이용되는 컴퓨터를 '서버'라고 함.

1.3 수직 분할형 아키텍처
  1.3.1 클라이언트 -서버형 아키텍처
  클라이언트 측에 전용 소프트웨어를 설치해야한다.
  장점 : 클라이언트 측에서 많은 처리를 실행 할 수 있어서 소수의 서버로 다수의 클라이언트를 처리할 수 있다.
  단점 : 클라이언트 측의 소프트웨어 정기 업데이트가 필요하다.
         서버 확장성에 한계가 발생할 수 있다.

  1.3.2 3계층형 아키텍처
  클라이언트 - 서버형의 발전시킨 버전.
  프레젠테이션계층 - 애플리케이션 계층 - 데이터 계층
  각 층의 역할
  프레젠테이션 계층 : 사용자의 입력을 받음 , 웹 브라우저 화면 표시
  애플리케이션 계층 : 사용자 요청에 따라 업무 처리
  데이터 계층 : 애플리케이션 계층의 요청에 따라 데이터의 입출력을 한다.
  흐름 : 사용자가 웹 브라우저에 입력 -> 웹 서버에 전달됨 -> 웹서버는 뒤에 있는 애플리케이션 계층의
  애플리케이션 서버에(AP서버)에 전달한다. AP서버는 DB서버에 데이터를 요청한다.
  장점 : 서버 부하 집중 개선.
  단점 : 클라이언트- 서버보다 복잡함

*웹에서는 3계층형이 많이 사용됨. (지금 내가 있는 프로젝트에서도 이거인거 같음)

1.4 수평 분할형 아키텍처
  용도가 같은 서버를 늘려나가는 방식 - 서버 대수가 늘어나면
  한 대가 시스템에 주는 영향력이 낮아져서 안정성이 향상 됨 + 성능도 향상됨.

  1.4.1 단순 수평 분할형 아키텍처
  같은 기능을 가진 복수의 시스템으로 단순 분할
  수평 분할을 sharding(샤딩) or partitioning(파티셔닝)이라 부르기도 함.
  장점 : 수평으로 서버를 늘리기 때문에 확장성이 향상됨.
         분할한 시스템이 독립적으로 운영되므로 서로 영향을 주지 않는다.
  단점 : 데이터를 일원화해서 볼 수 없다.
         처리량이 균등하게 분할돼 있지 않으면 서버별 처리량에 치우침이 생긴다.

  1.4.2 공유형 아키텍처
  3계층 중에 일부 계층에서 상호 접속이 가능함 ex) 데이터는 동기처리함.
  oracle database의 클러스터 기능에서는 어떤 db에 접속해도 같은 결과를 얻을 수 있도록 내부적으로
  데이터 교환을 하고 있다.

  * 여기서 잠깐 클러스터란?
  cluster - 무리, 송이, 떼, 집단

  클러스터링?
  여러대의 서버가 동시에 한가지 업무를 수행하도록 만드는 것.
  예를 들어 DB가 한대 있는데 이 한대가 뻗으면 시스템 장애가 난다.
  만약 2대를 클러스터링 해 놓고 각각의 역할을 수행하다가 한놈이 뻗으면 나머지 한놈이
  그 역할을 대신 수행하도록 하면 위와 같은 문제를 해결하면서 지속적인 서비스를 제공해줄 수 있게 됨.

1.5 지리분할형 아키텍처
  1.5.3 클라우드형 아키텍처
  사용자 쪽에서 보면 일반서버처럼 동작하고 서버가 가상화돼 있어서 사용자는 어느 물리 서버에서 동작하고 있는지 모른다.
  클라우드 세계에서는 어떤 계층을 클라우드상에 배치하는가에 따라 그 명칭이 달라진다.
  SaaS 모델에서는 서버뿐만 아니라 애플리케이션을 포함한 업무 시스템을 클라우드 서비스 회사가 제공하기 때문에
  사용자는 인프라를 의식할 필요가 없다. SaaS의 대표적인 예 = gmail.


3.2 3계층형 시스템의 주요 개념 설명
  3.2.1 프로세스와 스레드
  OS상에서 프로세스가 시작돼서 사용자 요청을 받을 수 있게 됨 ->
  시작 의뢰가 있으면 커널이 프로세스를 작성한다. 또한 요청 분량만큼만 메모리 공간을 할당 ->
  프로그램은 서버 내부의 디스크 상에 설치된다.
  프로세스는 전용 메모리 공간을 이용해서 동작함
  스레드는 다른 스레드와 메모리 공간을 공유하고 있음. 뭘 이용할지는 애플리케이션 개발자가 정함

  3.2.2 OS커널
  커널의 6가지 역할
  ㄱ.시스템 콜 인터페이스 - 프로세스나 스레드로부터 명령을 받는 인터페이스
  ㄴ.프로세스 관리 - 가됭되고 있는 프로세스 관리와 CPU 이용 우선순위 등을 '스케줄' 한다.
  ㄷ.메모리 관리 - 서버상의 메모리를 단위 크기의 블록으로 분할해서 할당.
  ㄹ.네트워크 스택 - 네트워크 관리
  ㅁ.파일 시스템 관리 - 파일 시스템 관리
  ㅂ.장치 드라이버 - 디스크, NIC, HBA 등의 물리 장치와 작업.

  ㄱ.시스템 콜 인터페이스
  애플리케이션이 OS를 통해서 어떤 처리를 하고 싶으면 시스템 콜이라고 하는 명령을 이용해서 커널에 명령을 내림
  ㄴ.프로세스 관리
  OS상에서는 수천개의 프로세스를 가동할 수 있다. 이에 비해 물리 서버의 CPU 코어 수는 많아야 수십개 정도.
  그래서 커널이 프로세스를 관리한당 언제, 어떤 프로세스가 어느 정도의 CPU 코어를 이용 할 수 있는지,
  뭐 부터 처리할 건지 등을 관리함
  ㄷ.메모리 관리
  프로세스 관리는 CPU 코어를 고려했지만, 메모리 관리에서는 물리 메모리 공간의 최대치를 고려한다.
  ㄹ.네트워크 스택
  다른 장에서 다룸.
  ㅁ.파일시스템 관리
  물리 디스크에 제공된 데이터를 관리하는 기능
  일상에서 사용하는 문서 파일 같은거는 물리 디스크에 '0001010101010' 이런식으로 기록 되어있음.
  구분표시도 없고 그대로 사용하기 불편. but 파일 시스템 관리 덕분에 애플리케이션은 '파일'이라는 단위로
  데이터를 작성하거나 삭제할 수 있다.

  71p부터 다시
